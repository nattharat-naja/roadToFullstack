@use "variable" as *;

@use "sass:map";

* {
    margin: 0 0 2rem 0;
    padding: 0;
    border: 0;
    box-sizing: border-box;
    font-family: "Itim", monospace;
    line-height: 1.8;
    scroll-behavior: smooth;
    text-transform: capitalize;
}

html,
body {
    margin-bottom: 0;
}

h1 {
    text-align: center;
    line-height: 1;
    font-size: 2rem;
    font-size: calc(2.5rem + 2vw);
}

h2 {
    margin-bottom: 1.5rem;
    line-height: 1;
}

h3 {
    margin-bottom: 1rem;
    line-height: 1;
}

h4 {
    margin-bottom: 0.75rem;
    line-height: 1;
}

h5 {
    margin-bottom: 0.5rem;
    line-height: 1;
}

h6 {
    margin-bottom: 0.25rem;
    line-height: 1;
}

h1,
h2,
h3,
h4,
h5,
h6,
th,
a:not(.link) {
    text-transform: uppercase;
}

header {
    p {
        font-style: italic;
    }

    h1 {
        margin-bottom: 2rem;

        & + p {
            font-size: calc(1rem + 0.25vw);
        }
    }

    h2 {
        margin-bottom: 1rem;

        & + p {
            font-size: 0.95rem;
        }
    }

    h3 {
        margin-bottom: 0.5rem;

        & + p {
            font-size: 0.9rem;
        }
    }

    h4 {
        margin-bottom: 0.25rem;

        & + p {
            font-size: 0.8rem;
        }
    }
}

a {
    color: inherit;
    text-decoration: none;
    transition: 0.3s;
    cursor: pointer;

    &:hover {
        color: $main-color;
    }
}

@mixin input-bar() {
    outline: none;
    border: 0.125rem solid $gray-color;
    padding: 0.5rem 1rem;
    margin-bottom: 0;
    width: 100%;
}

@mixin input-box() {
    appearance: none;
    width: 25px;
    height: 25px;
    margin: 0 1rem 0 0;
    transform: translateY(6px);
    cursor: pointer;

    &::before {
        content: "";
        display: block;
        width: 25px;
        height: 25px;
        border: 0.125rem solid $gray-color;
        position: absolute;
    }

    &:checked::before {
        content: "\f00c";
        color: white;
        border-color: black;
        background-color: black;
        text-align: center;
    }
}

input {
    &[type="text"],
    &[type="email"] {
        @include input-bar();

        &::placeholder {
            font-size: 1rem;
        }
    }

    &[type="checkbox"] {
        @include input-box();
    }

    &[type="radio"] {
        @include input-box();
        border-radius: 50%;

        &::before {
            border-radius: 50%;
        }
    }

    &:focus {
        border-color: $main-color;
    }
}

select {
    @include input-bar();

    &:focus {
        border-color: $main-color;
    }
}

textarea {
    @include input-bar();

    &::placeholder {
        font-size: 1rem;
    }

    &:focus {
        border-color: $main-color;
    }
}

label {
    font-size: 1rem;
}

ul,
ol,
dl {
    list-style-position: inside;
}

dd {
    margin-left: 2rem;
    text-align: justify;
}

table {
    width: 100%;
    border-collapse: collapse;

    tbody {
        tr {
            border-bottom: 0.125rem solid $gray-color;
            margin: 0;

            &:nth-child(odd) {
                background-color: $light-color;
            }
        }
    }

    th,
    td {
        text-align: start;
        padding: 1rem;
    }
}

blockquote {
    padding: 1rem 0 1rem 2rem;
    border-left: 4px solid $gray-color;
    font-style: italic;
}

hr {
    height: 0.1rem;
    margin: 3rem 0;
    background-color: $gray-color;
}

code {
    background-color: $light-color;
    border: 0.125rem solid $gray-color;
    padding: 0.125rem 0.5rem;
    font-size: 0.9rem;
    word-spacing: 0.5rem;
    white-space: pre;
    overflow-x: auto;
}

img {
    width: 100%;
    object-position: center;
}

.solid::before {
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
}

.brands::before {
    font-family: "Font Awesome 5 Brands";
    font-weight: 400;
}

.row {
    display: grid;
    grid-template-columns: repeat($column, 1fr);
    column-gap: 1rem;
}

@for $i from 1 through $column {
    .col-sm-#{$i} {
        grid-column: span $i;
    }
}

@each $breakpoint in map.keys($breakpoints) {
    @media screen and (min-width: map.get($breakpoints, $breakpoint)) {
        @for $i from 1 through $column {
            .col-#{$breakpoint}-#{$i} {
                grid-column: span $i;
            }
        }
    }
}
